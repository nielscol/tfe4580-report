%!PS-Adobe-3.0 EPSF-3.0
%%Title: discrete_pll_full_noise.ps
%%Creator: XCircuit v3.8 rev78
%%CreationDate: Mon Nov 25 00:59:21 2019
%%Pages: 1
%%BoundingBox: 68 68 832 245
%%DocumentNeededResources: font Helvetica Helvetica-Bold Times-Roman 
%%EndComments
%%BeginProlog
%
%  PostScript prolog for output from xcircuit
%  Version: 3.8
%
%  Electrical circuit (and otherwise general) drawing program
%
%  Written by Tim Edwards 8/5/93--11/1/10  (tim.edwards@multigig.com)
%  The Johns Hopkins University (1993-2004)
%  MultiGiG, Inc. (2004-2012)
%
%%BeginResource: procset XCIRCproc 3.8 0
%
% supporting definitions --- these are the primary xcircuit types.

/XCIRCsave save def
/topmat matrix currentmatrix def

/fontslant { /slant exch def [1 0 slant 1 0 0] 
    exch findfont exch makefont dup length dict /ndict exch def
    { 1 index /FID ne { ndict 3 1 roll put } { pop pop } ifelse } forall
    ndict definefont pop} def
/ul { dup type /stringtype eq showflag 1 eq and { gsave 
   currentpoint topmat setmatrix 0 0 moveto 2 index stringwidth pop (_)
   false charpath flattenpath pathbbox grestore exch pop 1 index
   sub setlinewidth exch pop currentpoint 3 -1 roll add moveto 0
   rlineto stroke moveto } if } def
/ol { dup type /stringtype eq showflag 1 eq and { gsave gsave
   currentpoint topmat setmatrix 2 index stringwidth pop 3 index
   true charpath flattenpath pathbbox grestore exch pop
   exch pop topmat setmatrix (_) true charpath pathbbox grestore
   exch pop 1 index sub setlinewidth exch pop currentpoint
   exch 4 1 roll exch sub add moveto pop 0 rlineto stroke
   moveto } if } def
/stW { gsave currentpoint newpath moveto true charpath flattenpath
	pathbbox pop exch pop sub grestore } def
/Ts {mark Tabs aload pop counttomark 1 add array astore /Tabs exch def Tabs
	0 currentpoint pop put} def
/Tbn {mark Tabs aload pop counttomark dup 2 add 1 roll cleartomark 1 sub} def
/Tb { 0 1 Tbn {Tabs exch get dup currentpoint pop lt
	{currentpoint exch pop moveto exit} {pop} ifelse } for } def
/Tf { Tbn -1 0 {Tabs exch get dup currentpoint pop gt
	{currentpoint exch pop moveto exit} {pop} ifelse } for } def
/qS { (aa) stW (a a) stW sub 4 div 0 Kn } def
/hS { qS qS } def
/pspc 0 def
/cf0 { scalefont setfont } bind def
/Kn { dup kY add /kY exch def rmoveto } bind def
/ss { /fscale fscale 0.67 mul def currentfont 0.67 cf0 0 fscale0 fscale mul
	0.33 mul neg Kn} def
/Ss { /fscale fscale 0.67 mul def currentfont 0.67 cf0 0 fscale0 fscale mul
	0.67 mul Kn } def
/ns { 0 kY neg Kn /kY 0 def /fscale 1.0 def xfont0 1.0 cf0 } def
/MR { /twidth exch def } def
/CR { ns 0 /Bline Bline fscale0 neg add def Bline moveto } def
/cf { dup type /realtype ne {1.0} if exch findfont exch kY 0 eq
	{ 40 mul dup /fscale0 exch def cf0 /xfont0 currentfont def}
	{fscale0 mul fscale mul cf0} ifelse } def
/ctmk { counttomark dup 2 add -1 roll pop } bind def
/label { gsave translate 0 0 moveto dup scale neg
	/rotval exch def /twidth 100000 def /just exch def just 384 and
	0 gt {/mshow {pop} def} {/mshow {show} def} ifelse just 16 and 0
	gt {gsave rotval rotate 0 1 dtransform gsave pagemat setmatrix
	idtransform exch grestore 1 0 dtransform gsave pagemat setmatrix
	idtransform exch grestore dup abs 1e-9 lt {pop mul 0 gt} {3 1 roll
	pop pop 0 lt} ifelse grestore {-1 /rotval rotval neg def /just just
	dup 3 and 1 ne {3 xor} if def} {1} ifelse exch -1e-9 lt {-1 /rotval
	rotval neg def /just just dup 12 and 4 ne {12 xor} if def} {1}
	ifelse scale } if /showflag 0 def /fspc pspc def /Bline 0 def /Tabs
	0 array def /fscale 1.0 def /kY 0 def gsave dup 1 add copy dup
	1 0 dtransform exch atan rotate {exch dup type /stringtype eq {gsave
        dup gsave newpath 0 0 moveto true charpath flattenpath pathbbox pop
	exch pop exch pop grestore currentpoint pop add twidth
	ge {grestore CR exch 1 add dup 2 add {CR} exch 1 roll exch} {grestore}
	ifelse true charpath flattenpath} {dup type /arraytype eq {exec} {12
	string cvs true charpath flattenpath} ifelse} ifelse} repeat exch pop
	pathbbox grestore 3 -1 roll pop 3 1 roll just 1 and 0 gt {just 2 and
	0 gt {exch pop neg fspc sub} {exch sub 0.5 mul neg} ifelse} {pop neg
	fspc add} ifelse exch Bline exch just 4 and 0 gt {just 8 and 0 gt
	{exch pop neg fspc sub} {add 0.5 mul neg} ifelse} {pop neg fspc add}
	ifelse rotval rotate Kn currentpoint translate /showflag 1 def /Bline
	0 def /Tabs 0 array def /fscale 1.0 def /kY 0 def {dup type
	/stringtype eq {mshow} {dup type /arraytype eq {exec} {12 string cvs
	mshow} ifelse} ifelse} repeat grestore endclip} def
/pinlabel { 4 index 32 and 0 ne hlevel 0 eq or { /pspc 10 def label
	/pspc 0 def } { pop pop pop pop pop {pop} repeat } ifelse } def
/pinglobal { pinlabel } def
/infolabel { pinlabel } def
/graphic { gsave 4 index cvx exec /DataSource get resetfile translate 0 0
	moveto neg rotate dup scale cvx exec image grestore endclip} def

/scb { setrgbcolor } bind def  /sce { defColor aload pop scb } bind def
/cRedef {/defColor currentcolor 3 array astore def} def
/begingate {dup type /dicttype ne {1 dict} if begin	% default params
	dup type /dicttype ne {1 dict} if begin		% instanced params
	/hlevel hlevel 1 add def /defColor currentcolor sce 3 array astore
	def gsave sce translate 0 0 moveto neg rotate dup type /nametype
	eq not { dup abs currentlinewidth exch div setlinewidth } { pop }
	ifelse dup abs scale clipped 1 and 1 eq {/clipped clipped 1 add def}
	if} bind def
/endgate { /hlevel hlevel 1 sub def grestore defColor aload pop cRedef
	scb end end endclip} bind def

/hlevel 0 def
/endclip {clipped 1 and 1 eq {grestore /clipped clipped 1 sub def} if} def
/tmpa [1 0 0 1 0 0] def
/gar {8 8 true tmpa {<c0 c0 00 00 0c 0c 00 00>} imagemask} bind
{8 8 true tmpa {<30 70 60 02 03 07 06 20>} imagemask} bind
{8 8 true tmpa {<0c 1e 1e 0c c0 e1 e1 c0>} imagemask} bind
{8 8 true tmpa {<0f 0f 0f 0f f0 f0 f0 f0>} imagemask} bind
{8 8 true tmpa {<3f f3 e1 e1 f3 3f 1e 1e>} imagemask} bind
{8 8 true tmpa {<df cf 8f 9f fd fc f8 f9>} imagemask} bind
{8 8 true tmpa {<ff 3f 3f ff ff f3 f3 ff>} imagemask} bind 7 array astore def
/ppaint { gsave clip tmpa dup setmatrix pathbbox neg exch neg 4 2 roll
  neg 4 -1 roll 2 copy gt {exch} if 8 div ceiling 8 mul 4 2 roll neg 2 copy
  gt {exch} if 8 div ceiling 8 mul 3 -1 roll -8 5 -1 roll
  { 3 index exch 5 exch put dup -8 3 index { 3 index
  exch 4 exch put 3 index exec } for } for pop pop pop pop grestore } bind def
/setstyles {
  currentlinewidth mul setlinewidth /style exch def style 2048 and 0 gt
  clipped 1 and 0 eq and {clip newpath /clipped clipped 1 add def} {
  style 1 and 0 gt not {closepath} if
  style 1024 and 0 gt {2 setlinecap 0 setlinejoin} if
  style 2 and 0 gt {currentlinewidth 4 mul dup 2 array astore 0 setdash} if
  style 4 and 0 gt {0.5 currentlinewidth 4 mul 2 array astore 0 setdash} if
  gsave style 16 and 0 gt { style 224 and -5 bitshift style 256 and 0 gt {
  7 exch sub 8 div dup 1 exch sub currentrgbcolor 3 array astore
  {3 copy mul add 4 1 roll pop} forall pop pop setrgbcolor eofill}
  {dup 7 lt {gar exch get ppaint} {pop eofill} ifelse} ifelse}
  {style 256 and 0 gt {1 setgray eofill} if} ifelse grestore style 8 and 0 gt 
  style 512 eq or {newpath} {stroke} ifelse grestore endclip} ifelse} def     

/addtoy {exch dup dup 2 mul 3 add 1 roll -1 1 { 4 1 roll dup 4 1 roll add
	4 -1 roll 2 mul 1 add index 2 mul 2 add 2 roll} for pop} def
/addtoy1 {1 exch addtoy pop} def
/addtoy3 {3 exch addtoy pop} def
/addtoy4 {4 exch addtoy pop} def
/addtox {exch dup dup 2 mul 3 add 1 roll -1 1 { 4 1 roll dup 4 1 roll 3 -1 roll
	add exch 4 -1 roll 2 mul 1 add index 2 mul 2 add 2 roll} for pop} def
/addtox1 {1 exch addtox pop} def
/addtox3 {3 exch addtox pop} def
/addtox4 {4 exch addtox pop} def
/polygon { gsave /num exch def moveto num 1 sub {lineto} repeat setstyles } def
/xcarc   { gsave newpath arc setstyles } def
/elb { matrix currentmatrix 7 -1 roll 7 -1 roll translate 5 1 roll 4 -1 roll
	3 index div 1 scale } def
/ele { 0 4 1 roll 0 4 1 roll } bind def
/ellipse { gsave elb newpath ele arc setmatrix setstyles } def
/pellip  { elb ele arc setmatrix } def
/nellip  { elb ele arcn setmatrix } def
/spline  { gsave moveto curveto setstyles } def
/polyc   { {lineto} repeat } bind def
/beginpath { gsave moveto } bind def
/endpath { setstyles } bind def
/bop	 { 1 setlinecap 2 setlinejoin 6 setmiterlimit 0 0 0 scb cRedef
	/clipped 0 def} def
/psinsertion {/PSobj save def /showpage {} def /setpagedevice {pop} def bop
	rotate translate dup scale} def
/end_insert {PSobj restore} def
/setpagemat {/pagemat matrix currentmatrix def} def
/inchscale  {setpagemat 0.375 mul dup scale} def
/cmscale    {setpagemat 0.35433071 mul dup scale} def

%%EndResource
%%EndProlog

% XCircuit output starts here.

%%BeginSetup

/generic::tap {
% trivial
<</@in (bus\(0:7\)) /@out (bus\(0\)) >> begingate
496 1.000 0 8 16 0 0 -8 3 polygon
1.000 0.000 0.000 scb
mark @out {/Helvetica cf} ctmk 20 0 1.000 16 0 pinlabel
mark @in {/Helvetica cf} ctmk 23 0 1.000 0 0 pinlabel
endgate
} def

/generic::dot {
% trivial
begingate
248 1.000 0 0 6 0.000 360.000 xcarc
1.000 0.000 0.000 scb
(x) {/Times-Roman cf} 2 29 0 1.000 0 0 pinlabel
endgate
} def


%%EndSetup

%%Page: basic_feedback 1
%%PageOrientation: Portrait
/pgsave save def bop
% 32.00 4.00 gridspace
1.0000 inchscale
2.6000 setlinewidth 416 544 translate

1 2.000 -128 -64 80 -64 2 polygon
1 2.000 112 -224 112 -224 112 -96 3 polygon
1.000 270 112 -112 generic::tap
($\\Phi_{ref}$[n]) {/Helvetica-Bold cf} 2 144 0 0.700 -128 -40 label
1 2.000 144 -64 224 -64 2 polygon
1.000 0 64 -64 generic::tap
1.000 0 208 -64 generic::tap
($\\Phi_{div}$[n]) {/Helvetica-Bold cf} 2 144 0 0.700 264 -196 label
(e$_\\Phi$[n]) {/Helvetica-Bold cf} 2 144 0 0.700 492 -32 label
1 2.000 112 -64 32 0.000 360.000 xcarc
1 2.000 80 -64 144 -64 2 polygon
1 2.000 112 -96 112 -32 2 polygon
($\\frac{\\mathrm{M}}{2\\pi}$) {/Helvetica-Bold cf} 2 144 360 0.700 236 -20 
label
($\\Phi_e$) {/Helvetica-Bold cf} 2 144 0 0.700 152 -40 label
1 2.000 224 -96 224 -32 272 -64 224 -96 4 polygon
1 2.000 272 -64 336 -64 2 polygon
1.000 0 324 -64 generic::tap
1 2.000 400 -64 624 -64 2 polygon
0.400 0.400 0.400 scb
2 2.000 32 32 32 -144 464 -144 464 32 4 polygon
sce
(TDC) {/Helvetica-Bold cf} 2 144 0 0.700 32 48 label
1 1.500 520 -80 536 -48 2 polygon
1 1.500 52 -88 68 -88 2 polygon
1 1.500 60 -96 60 -80 2 polygon
1 1.500 80 -120 96 -120 2 polygon
0 2.000 624 0 624 -128 800 -128 800 0 4 polygon
1.000 0 608 -64 generic::tap
(H$_{LF}$\(z\)) {/Helvetica-Bold cf} 2 144 0 0.700 652 -76 label
1 2.000 928 -64 1088 -64 2 polygon
1 1.500 1000 -80 1016 -48 2 polygon
1.000 0 1072 -64 generic::tap
(u[n]) {/Helvetica-Bold cf} 2 144 0 0.700 980 -36 label
0 2.000 1088 0 1088 -128 1296 -128 1296 0 4 polygon
($\\frac{2\\pi K_{DCO}T}{1-z^{-1}}$) {/Helvetica-Bold cf} 2 144 0 0.700 1116 
-72 label
1 2.000 1424 -64 1536 -64 2 polygon
($\\Phi_{out}$[n]) {/Helvetica-Bold cf} 2 144 0 0.700 1436 -44 label
0 2.000 752 -160 752 -288 928 -288 928 -160 4 polygon
1.000 180 944 -224 generic::tap
1 2.000 932 -224 1472 -224 2 polygon
1 2.000 1472 -224 1472 -224 1472 -64 3 polygon
1.000 0 1472 -64 generic::dot
1 2.000 112 -224 624 -224 2 polygon
($\\div$ N) {/Helvetica-Bold cf} 2 144 0 0.700 796 -236 label
(DCO) {/Helvetica-Bold cf} 2 144 0 0.700 1088 12 label
1 2.000 340 -64 404 -64 2 polygon
1 2.000 372 -96 372 -32 2 polygon
1 2.000 372 -64 32 0.000 360.000 xcarc
1 1.500 320 -96 336 -96 2 polygon
1 1.500 328 -104 328 -88 2 polygon
1.000 90 372 -16 generic::tap
1 2.000 372 -28 372 -28 372 64 3 polygon
1 1.500 392 -20 408 -20 2 polygon
1 1.500 400 -28 400 -12 2 polygon
(q$_{n_{TDC}}$[n]) {/Helvetica cf} 2 144 0 0.700 384 56 label
1 2.000 896 -64 32 0.000 360.000 xcarc
1 2.000 896 -96 896 -32 2 polygon
1 2.000 864 -64 928 -64 2 polygon
1 2.000 896 -28 896 -28 896 64 3 polygon
1.000 90 896 -16 generic::tap
1.000 0 848 -64 generic::tap
1 2.000 800 -64 860 -64 2 polygon
1 1.500 852 -104 852 -88 2 polygon
1 1.500 844 -96 860 -96 2 polygon
1 1.500 916 -20 932 -20 2 polygon
1 1.500 924 -28 924 -12 2 polygon
(q$_{n_{LF}}$[n]) {/Helvetica cf} 2 144 0 0.700 908 56 label
1 2.000 656 -256 656 -192 2 polygon
1 2.000 624 -224 688 -224 2 polygon
1 2.000 656 -224 32 0.000 360.000 xcarc
1 2.000 692 -224 752 -224 2 polygon
1.000 180 704 -224 generic::tap
1 2.000 656 -320 656 -320 656 -256 3 polygon
1.000 270 656 -272 generic::tap
($\\Phi_{n_{div}}$[n]) {/Helvetica cf} 2 144 0 0.700 668 -332 label
1 1.500 628 -280 628 -264 2 polygon
1 1.500 620 -272 636 -272 2 polygon
1 1.500 692 -196 708 -196 2 polygon
1 1.500 700 -204 700 -188 2 polygon
1 2.000 1392 -64 32 0.000 360.000 xcarc
1 2.000 1360 -64 1424 -64 2 polygon
1 2.000 1392 -96 1392 -32 2 polygon
1 1.500 1412 -20 1428 -20 2 polygon
1 1.500 1420 -28 1420 -12 2 polygon
1 1.500 1348 -104 1348 -88 2 polygon
1 1.500 1340 -96 1356 -96 2 polygon
1.000 90 1392 -16 generic::tap
1 2.000 1392 -28 1392 -28 1392 64 3 polygon
1 2.000 1296 -64 1356 -64 2 polygon
1.000 0 1344 -64 generic::tap
($\\Phi_{n_{DCO}}$[n]) {/Helvetica cf} 2 144 0 0.700 1404 56 label
1.000 1.000 1.000 scb
0 1.000 1792 100 1792 -352 -224 -352 -224 100 4 polygon
pgsave restore showpage

%%Trailer
XCIRCsave restore
%%EOF
